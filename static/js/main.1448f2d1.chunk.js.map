{"version":3,"sources":["resources/images/logo.png","components/Button.js","components/TextArea.js","helpers/Steganography.js","pages/ImageCrypt.js","pages/ImageDecrypt.js","pages/About.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styleClass","this","props","secondary","size","componentStyle","determineStyle","className","onClick","text","React","Component","TextArea","canvasRef","createRef","state","textValue","width","event","setState","target","value","onInput","maxLength","textMaxLength","style","isDisabled","type","placeholder","onInputHandler","bind","length","convertNumbertoByte","n","Error","toString","substr","convertByteToNumber","numBin","parseInt","changeLastSignificantBit","sourceByte","changeBit","undefined","Steganography","context","img","rawImage","currentImg","imageContext","console","log","height","content","CreateRawDataFromContext","data","EmbedTextInsideRawData","image","rawData","c","singleColumn","r","imageData","getImageData","push","CalculateByteSize","btoa","unescape","encodeURIComponent","countForHeader","convertNumbertoBigByte","contentBinaryString","input","output","i","charCodeAt","convertStringToBit","ptr","rD","sizeHeader","slice","messageCharCount","trc","contentInBits","decodeURIComponent","escape","atob","str","match","map","fromBinary","String","fromCharCode","join","binaryToWords","ImageCrypt","steganObj","isUploaded","maxCharCount","disableTextarea","userContent","stopPropagation","preventDefault","self","file","files","canvas","current","reader","FileReader","onload","e","Image","src","result","getContext","drawImage","isLoading","charSizeMax","Math","floor","readAsDataURL","resObj","HideDataInContext","canvasSave","putImageData","ImageData","canvasToImage","name","quality","canvasStyle","color","upload","click","ref","id","accept","display","onChange","onChangeFile","onTextInputChange","saveCanvas","ImageDecrypt","hiddenText","GetHiddenContent","About","alt","App","logo","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1448f2d1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.01210f68.png\";","import React from 'react'\r\n\r\n/**\r\n * Summary. Super simple button component\r\n *\r\n * Description. Simple button component to remove ugly looking default ones. Check hacky App.css for css details\r\n *  \r\n */\r\nexport default class Button extends React.Component {\r\n    determineStyle() {\r\n        let styleClass = \"btn\"\r\n        if (this.props.secondary) {\r\n            styleClass += \" bg-indigo\"\r\n        }\r\n        if (this.props.size) {\r\n            if (this.props.size === \"big\") {\r\n                styleClass += \" btn-lg\"\r\n            } else if (this.props.size === \"medium\") {\r\n                styleClass += \" btn-md\"\r\n            } else if (this.props.size === \"small\") {\r\n                styleClass += \" btn-sm\"\r\n            }\r\n        }\r\n        return styleClass\r\n    }\r\n\r\n    render() {\r\n        let componentStyle = this.determineStyle();\r\n        return <div className={componentStyle} onClick={this.props.onClick}>{this.props.text}</div>\r\n    }\r\n}","import React from 'react'\r\n\r\n/**\r\n * Summary. Super simple TextArea component\r\n *\r\n * Description. Simple textarea component to remove ugly looking default one. Check hacky App.css for css details \r\n */\r\nexport default class TextArea extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n        this.state = {\r\n            textValue: \"\"\r\n        };\r\n    }\r\n\r\n    determineStyle() {\r\n        let styleObject = {\r\n            width: this.props.size ? this.props.size : \"90vw\"\r\n        }\r\n        return styleObject\r\n    }\r\n\r\n    onInputHandler(event) {\r\n        this.setState({ textValue: event.target.value }, this.props?.onInput(event.target.value));\r\n    }\r\n\r\n    render() {\r\n        let componentStyle = this.determineStyle();\r\n        \r\n        return (\r\n            <div className=\"TextareaParent\">\r\n                <textarea maxLength={this.props.textMaxLength} style={componentStyle} className={this.props.isDisabled? \"InputTextArea TextDisabled\":\"InputTextArea\"} type=\"text\" placeholder=\"Your Secret Message\" value={this.state.textValue} onInput={this.onInputHandler.bind(this)} />\r\n                <p className=\"InformationText\">This image can only take up to {this.props.textMaxLength} characters. You used {this.state.textValue.length} characters ( not words )</p>\r\n            </div>)\r\n    }\r\n}","\r\n\r\n/* Start of outer functions */\r\nfunction convertNumbertoByte(n) {\r\n    if (n < 0 || n > 255 || n % 1 !== 0) {\r\n        throw new Error(n + \" does not fit in a byte\");\r\n    }\r\n    return (\"000000000\" + n.toString(2)).substr(-8)\r\n}\r\n\r\nfunction convertNumbertoBigByte(n) {\r\n    if (n < 0 || n > 4294967296 || n % 1 !== 0) {\r\n        throw new Error(n + \" does not fit in a 4294967296\");\r\n    }\r\n    return (\"00000000000000000000000000000000\" + n.toString(2)).substr(-32)\r\n}\r\n\r\nfunction convertStringToBit(input) {\r\n    var output = \"\"\r\n    for (var i = 0; i < input.length; i++) {\r\n        output += (\"000000000\" + input[i].charCodeAt(0).toString(2)).substr(-8);\r\n    }\r\n    return output;\r\n}\r\n\r\nfunction convertByteToNumber(numBin) {\r\n    return parseInt(numBin, 2);\r\n}\r\n\r\nfunction changeLastSignificantBit(sourceByte, changeBit) {\r\n    if (sourceByte.length !== 8) throw new Error(\"This is not a valid byte!\")\r\n    if (changeBit === undefined) return sourceByte\r\n    return sourceByte.substr(0, 7) + changeBit;\r\n}\r\n\r\n// Thanks to https://stackoverflow.com/a/29975326\r\nfunction binaryToWords(str) {\r\n    if (str.match(/[10]{8}/g)) {\r\n        var wordFromBinary = str.match(/([10]{8}|\\s+)/g).map(function (fromBinary) {\r\n            return String.fromCharCode(parseInt(fromBinary, 2));\r\n        }).join('');\r\n        return wordFromBinary\r\n    }\r\n}\r\n\r\n/* End of outer functions */\r\n\r\nexport default class Steganography {\r\n    rawImage = []\r\n    constructor(context, img) {\r\n        this.currentImg = img\r\n        this.imageContext = context\r\n        console.log(\"Steganography created with raw data. Dimensions\", context)\r\n    }\r\n\r\n    CalculateByteSize() {\r\n        if (this.currentImg) {\r\n            return (this.currentImg.width * this.currentImg.height * 3)\r\n        } else {\r\n            throw new Error('Function requires an image! Please check your constructor');\r\n        }\r\n    }\r\n\r\n    HideDataInContext(content) {\r\n        this.CreateRawDataFromContext()\r\n        let data = this.EmbedTextInsideRawData(content)\r\n        return { data: data, image: this.currentImg }\r\n    }\r\n\r\n    CreateRawDataFromContext() {\r\n        let rawData = []\r\n        for (var c = 0; c < this.currentImg.width; c++) {\r\n            let singleColumn = []\r\n            for (var r = 0; r < this.currentImg.height; r++) {\r\n                let imageData = this.imageContext.getImageData(c, r, 1, 1).data\r\n                singleColumn.push(imageData)\r\n            }\r\n            rawData.push(singleColumn)\r\n        }\r\n        this.rawImage = rawData;\r\n    }\r\n\r\n    EmbedTextInsideRawData(content) {\r\n        if (!this.rawImage) throw new Error(\"Please call CreateRawDataFromContext() first!\")\r\n        if (content.length * 8 > this.CalculateByteSize()) {\r\n            throw new Error(\"Can't do the operation! Text is too big\")\r\n        }\r\n        content = btoa(unescape(encodeURIComponent(content)))\r\n        console.log( \"Content length\" , content.length )\r\n        /*  We will reserve 4 bytes (32 bit) for message length */\r\n        let countForHeader = convertNumbertoBigByte(content.length)\r\n        let contentBinaryString = convertStringToBit(content)\r\n        contentBinaryString = countForHeader + contentBinaryString;\r\n        let ptr = 0\r\n        for (var c = 0; c < this.rawImage.length; c++) {\r\n            for (var r = 0; r < this.rawImage[0].length; r++) {\r\n                for (let i = 0; i < 3; i++) {\r\n                    let rD = this.rawImage[c][r][i]\r\n                    this.rawImage[c][r][i] = convertByteToNumber(changeLastSignificantBit(convertNumbertoByte(rD), contentBinaryString[ptr]))\r\n                    ptr++\r\n                }\r\n                if (ptr >= contentBinaryString.length) {\r\n                    return this.rawImage\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    GetHiddenContent() {\r\n        let sizeHeader = \"\"\r\n        for (var c = 0; c < this.currentImg.width; c++) {\r\n            for (var r = 0; r < this.currentImg.height; r++) {\r\n                let imageData = this.imageContext.getImageData(c, r, 1, 1).data\r\n                for (let i = 0; i < 3; i++) {\r\n                    sizeHeader += convertNumbertoByte(imageData[i]).slice(-1);\r\n                    if( sizeHeader.length === 32)break;\r\n                }\r\n                if( sizeHeader.length === 32)break;\r\n            }\r\n            if( sizeHeader.length === 32)break;\r\n        }\r\n\r\n        let messageCharCount = convertByteToNumber(sizeHeader)\r\n        let trc = -32; // Last 4 bytes\r\n        let contentInBits = \"\"\r\n        for (c = 0; c < this.currentImg.width; c++) {\r\n            for (r = 0; r < this.currentImg.height; r++) {\r\n                let imageData = this.imageContext.getImageData(c, r, 1, 1).data\r\n                for (let i = 0; i < 3; i++) {\r\n                    contentInBits += convertNumbertoByte(imageData[i]).slice(-1);\r\n                    trc++\r\n                    if( trc >= messageCharCount*8 ) break;\r\n                }\r\n                if( trc >= messageCharCount*8 ) break;\r\n            }\r\n            if( trc >= messageCharCount*8 ) break;\r\n        }\r\n        let content =  decodeURIComponent(escape(atob(binaryToWords(contentInBits.substr(32)))));\r\n        return content\r\n    }\r\n}","import React from 'react';\r\nimport Button from \"../components/Button\";\r\nimport TextArea from \"../components/TextArea\";\r\nimport canvasToImage from 'canvas-to-image';\r\nimport Steganography from '../helpers/Steganography'\r\nimport Loader from \"react-loader-spinner\";\r\n\r\n\r\nexport default class ImageCrypt extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvasRef = React.createRef()\r\n        this.steganObj = null\r\n        this.state = {\r\n            isUploaded: false,\r\n            maxCharCount: 100,\r\n            disableTextarea: false,\r\n            userContent: \"\"\r\n        };\r\n    }\r\n\r\n    onChangeFile(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var self = this;\r\n        var file = event.target.files[0];\r\n        const canvas = this.canvasRef.current;\r\n        var reader = new FileReader();\r\n        // Reader loaded\r\n        reader.onload = function (e) {\r\n            const img = new Image();\r\n            img.src = e.target.result;\r\n            // Image loaded\r\n            img.onload = () => {\r\n                // Resize canvas with image\r\n                canvas.width = img.width;\r\n                canvas.height = img.height;\r\n                const context = canvas.getContext('2d');\r\n                context.drawImage(img, 0, 0); // Draw image to make it visible\r\n                self.setState( { isLoading: true }, ()=>{\r\n                    self.steganObj = new Steganography(context, img) // Init your Steganography object\r\n                    let charSizeMax = self.steganObj.CalculateByteSize(); // Calculate bytes\r\n                    // Beware. We are using base64 to avoid issues with UTF8 chars. This adds up 1.37 times more size. We are calculation that\r\n                    self.setState({ maxCharCount: Math.floor(charSizeMax / (8*1.37)), isUploaded: true, isLoading: false });\r\n                } )\r\n            }\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    // This is the heavy-work function. It interacts with Stegan object. \r\n    saveCanvas() {\r\n        var self = this;\r\n        self.setState( { isLoading: true }, ()=>{\r\n            // TODO: Turn this into a worker function so that it won't block UI. Or.. well.. upload it to server or something\r\n            let resObj = this.steganObj.HideDataInContext(this.state.userContent)\r\n            const canvasSave = this.canvasRef.current;\r\n            const context = canvasSave.getContext('2d');\r\n            for (var c = 0; c < resObj.image.width; c++) {\r\n                for (var r = 0; r < resObj.image.height; r++) {\r\n                    context.putImageData(new ImageData(resObj.data[c][r], 1, 1), c, r) // We want to save this to canvas again. So that we can do stuff.\r\n                }\r\n            }\r\n            canvasToImage(canvasSave, {\r\n                name: 'ImageCrypted',\r\n                type: 'png',\r\n                quality: 1\r\n            });\r\n            self.setState( { isLoading: false, disableTextarea: true })\r\n        })\r\n    }\r\n\r\n    onTextInputChange(text) {\r\n        this.setState({ userContent: text });\r\n    }\r\n\r\n    render() {\r\n        let canvasStyle = this.state.isUploaded ? { height: \"auto\" } : { height: \"0px\" }\r\n\r\n        return (\r\n            <div className=\"CryptHolder\">\r\n                {\r\n                    this.state.isLoading &&  <span className=\"LoadingFrame\">\r\n                    <Loader\r\n                        className=\"LoadingSpinner\"\r\n                        type=\"Grid\"\r\n                        color=\"#5A4FCF\"\r\n                        height={100}\r\n                        width={100}\r\n                    />\r\n                </span>\r\n                }\r\n                <h2>Hide Your Message</h2>\r\n                <p> Hide a text message in your image. Don't worry, it won't be visible in your image. You can learn more about this in About section.</p>\r\n                \r\n                { this.state.isUploaded && <Button size=\"big\" text=\"Reupload\" onClick={() => { this.upload.click() }}></Button>}\r\n                { !this.state.isUploaded && <Button size=\"big\" text=\"Upload\" onClick={() => { this.upload.click() }}></Button>}\r\n                <canvas className=\"ImageCanvas\" ref={this.canvasRef} style={canvasStyle} />\r\n                <input id=\"fileUploadInput\" type=\"file\" accept=\"image/png\" ref={(ref) => this.upload = ref} style={{ display: 'none' }}\r\n                    onChange={this.onChangeFile.bind(this)} />\r\n                {\r\n                    this.state.isUploaded && (\r\n                        <span style={ {    display: \"contents\"}}>\r\n                            <TextArea isDisabled={this.state.disableTextarea} textMaxLength={this.state.maxCharCount} onInput={this.onTextInputChange.bind(this)} />\r\n                            <Button text=\"Download\" secondary onClick={() => { this.saveCanvas() }}></Button>\r\n                            <subtitle>This can take a while if your image is big</subtitle>\r\n                        </span>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Button from \"../components/Button\";\r\nimport Steganography from '../helpers/Steganography'\r\n\r\nexport default class ImageDecrypt extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvasRef = React.createRef()\r\n        this.steganObj = null\r\n        this.state = {\r\n            isUploaded: false,\r\n            hiddenText: \"\"\r\n        };\r\n    }\r\n\r\n    onChangeFile(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var self = this;\r\n        var file = event.target.files[0];\r\n        const canvas = this.canvasRef.current;\r\n        var reader = new FileReader();\r\n        console.log(file)\r\n        reader.onload = function (e) {\r\n            const img = new Image();\r\n            img.src = e.target.result;\r\n            img.onload = () => {\r\n                canvas.width = img.width;\r\n                canvas.height = img.height;\r\n                const context = canvas.getContext('2d');\r\n                context.drawImage(img, 0, 0);\r\n                self.steganObj = new Steganography(context, img)\r\n                let hiddenText = self.steganObj.GetHiddenContent()\r\n                self.setState({ hiddenText: hiddenText, isUploaded: true });\r\n            }\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    render() {\r\n        let canvasStyle = this.state.isUploaded ? { height: \"auto\" } : { height: \"0px\" }\r\n        return (\r\n            <div className=\"CryptHolder\">\r\n                <h2>Reveal Hidden Message</h2>\r\n                <p> If your image includes a hidden message, you can reveal it from here. You can learn more about this in About section.</p>\r\n                <canvas className=\"ImageCanvas\" ref={this.canvasRef} style={canvasStyle} />\r\n                <input id=\"fileUploadInput\" type=\"file\" accept=\"image/png\" ref={(ref) => this.upload = ref} style={{ display: 'none' }}\r\n                    onChange={this.onChangeFile.bind(this)} />\r\n                { this.state.isUploaded && <p>Hidden text is: <div className=\"HiddenTextContainer\">{this.state.hiddenText} </div> </p>}\r\n                <Button text=\"Upload\" size=\"big\" onClick={() => { this.upload.click() }}></Button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default class About extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"AboutSection\">\r\n                <div className=\"ImageHolder\"> <img alt=\"Demo\" src=\"https://i.ibb.co/DLNzGjX/Untitled.png\" /> </div>\r\n                <h1>About</h1>\r\n                <h3>About Steganography</h3>\r\n                <p>Steganography is the technique of hiding secret data within an ordinary, non-secret, file or message in order to avoid detection; the secret data is then extracted at its destination. The use of steganography can be combined with encryption as an extra step for hiding or protecting data. The word steganography is derived from the Greek words steganos (meaning hidden or covered) and the Greek root graph (meaning to write).<br />Steganography can be used to conceal almost any type of digital content, including text, image, video or audio content; the data to be hidden can be hidden inside almost any other type of digital content. The content to be concealed through steganography -- called hidden text -- is often encrypted before being incorporated into the innocuous-seeming cover text file or data stream. If not encrypted, the hidden text is commonly processed in some way in order to increase the difficulty of detecting the secret content.</p>\r\n                <h3>About Konfi</h3>\r\n                <p>Konfi is a small project that demonstrates the usage of Steganography algorithms.\r\n                    <br />\r\n                    All you need to do is uploading a photo and defining your message. Rest will be handled by the algorithm.<br />\r\n                    <b> You are not uploading anything to any server - everything happens in the browser, hence, it's secure ( also slow if you upload a huge image ) </b>\r\n                </p>\r\n                <h3> Technical Information </h3>\r\n                <p>\r\n                    For this project, I'm using a quite common technique which is called LSB Replacing. LSB stands for <b>least significant bit</b>. If you are not familiar with bits and bytes, here is an example of how a byte looks like in binary. <br /> <img alt=\"Bytes\" src=\"https://i.ibb.co/jRw62j3/Untitled.jpg\" /><br />\r\n                    What Konfi does is the following:\r\n                    <br />\r\n                    It converts the entire message to Base64 to avoid any conversion loss, then it converts it to bytes hence to its bits. Then, it gets each pixel, breaks each pixel into its channels ( Red, Green, Blue and Alpha ) and breaks down each channel into bits. Once this is done, rest is just replacing each bit with the message's bits. Depending on your content and depending on your style, this process can take a while. Once the process is completed, you can download the file.\r\n                    <br /><br /><b>Beware:</b> <i>I'm exporting images in PNG format. It should <b>always</b> keep it in this format. JPEG and other formats are not a lossless compression. Any compression can result in a break in the message structure. </i>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}","import logo from './resources/images/logo.png';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport React from 'react'\nimport ImageCrypt from \"./pages/ImageCrypt\";\nimport ImageDecrypt from \"./pages/ImageDecrypt\";\nimport About from \"./pages/About\";\n\nfunction App() {\n  return (\n    <Router>\n\n      <nav className=\"navbar\">\n        <ul className=\"nav\">\n          <img alt=\"logo\" src={logo} className=\"logo\" /><h1 className=\"BrandName\">Konfi</h1>\n          <li>\n            <Link to=\"/\">Hide</Link>\n          </li>\n          <li>\n            <Link to=\"/reveal\">Reveal</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n        </ul>\n      </nav>\n\n      <Switch>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/reveal\">\n          <ImageDecrypt />\n        </Route>\n        <Route path=\"/\">\n          <ImageCrypt />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}